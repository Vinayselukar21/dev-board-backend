// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Organization {
  id        String   @id @default(uuid())
  name      String
  type      String @default("personal")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String   @unique
  owner   User     @relation("OrganizationOwner", fields: [ownerId], references: [id])

  users     User[]            @relation("OrganizationUsers")
  workspaces Workspace[]      @relation("OrganizationWorkspaces")
  members    WorkspaceMember[] @relation("OrganizationWorkspaceMembers")
  logs       Log[]             @relation("OrganizationLogs")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contactNo String   @db.VarChar(20) @default("")
  location  String?  @db.VarChar(255) @default("")
  jobTitle    String   @default("")
  designation String   @default("")

  // Workspace relations
  ownedWorkspaces Workspace[] @relation("OwnedWorkspaces")
  memberships     WorkspaceMember[]

  // Task relations
  assignedTasks Task[] @relation("AssignedTasks")
  Project        Project[]
  Task           Task[]
  logs           Log[] @relation("UserLogs")

  isVerified Boolean   @default(false)
  lastLogin  DateTime?

  // ✅ User may or may not own an organization (optional 1:1)
  ownedOrganization Organization? @relation("OrganizationOwner")

  // Organization membership (optional)
  organizationId String?
  organization   Organization? @relation("OrganizationUsers", fields: [organizationId], references: [id])
}


model Workspace {
  id          String   @id @default(cuid())
  icon        String?
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId  String?
  owner    User?              @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  
  members  WorkspaceMember[]

  projects Project[]
  
  departments Department[]
  
  logs Log[] @relation("WorkspaceLogs")

  calendarEvents CalendarEvent[] @relation("WorkspaceCalendarEvents")
  
  relationships MemberWorkspaceRelationship[]


  organizationId String?
  organization Organization? @relation("OrganizationWorkspaces", fields: [organizationId], references: [id]) 
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  role        String   @default("member")  //member, admin
  invitedAt   DateTime @default(now())
  accepted    Boolean  @default(false)

  userId      String
  workspaceId String
  departmentId String?

  user        User        @relation(fields: [userId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  department  Department?  @relation("MemberDepartment", fields: [departmentId], references: [id])

  projects     ProjectMember[]
  calendarEvents CalendarEventParticipant[] // ← Intermediate table

  createdEvents CalendarEvent[] @relation("CreatedEvents")

  relationships MemberWorkspaceRelationship[]

  organizationId String?
  organization Organization? @relation("OrganizationWorkspaceMembers", fields: [organizationId], references: [id])
}

model MemberWorkspaceRelationship {
  id               String          @id @default(cuid())
  workspaceMemberId String
  workspaceId String

  workspaceMember  WorkspaceMember @relation(fields: [workspaceMemberId], references: [id])
  workspace        Workspace       @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceMemberId, workspaceId])
}

model ProjectMember {
  id              String           @id @default(cuid())
  projectId       String
  memberId        String

  project         Project          @relation(fields: [projectId], references: [id])
  member          WorkspaceMember @relation(fields: [memberId], references: [id])

  assignedAt      DateTime         @default(now())

  @@unique([projectId, memberId]) // Optional: Prevent duplicate entries
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active") // "active", "archived", "completed", etc.
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign keys
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // One-to-many relation
  tasks Task[] @relation("TaskProject")
  taskStages TaskStage[] @relation("ProjectTaskStages")

  calendarEvents CalendarEvent[] @relation("ProjectCalendarEvents")

  members     ProjectMember[]
}

model TaskStage {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project  @relation("ProjectTaskStages",fields: [projectId], references: [id])
  tasks Task[] @relation("TaskStages")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo") // "todo", "in-progress", "done", etc.
  priority    String    @default("medium") // "low", "medium", "high", "critical"
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projectId String
  project   Project  @relation("TaskProject",fields: [projectId], references: [id])

  stageId String
  stage TaskStage @relation("TaskStages",fields: [stageId], references: [id])

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  assignees User[] @relation("AssignedTasks")
}

model Department {
  id          String           @id @default(cuid())
  workspaceId String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     WorkspaceMember[] @relation("MemberDepartment")

  @@unique([name, workspaceId]) // ✅ compound unique constraint
}


model Log {
  id        String   @id @default(cuid())
  type      String   @default("workspace")   // workspace, project, task
  action    String   @default("create")
  message   String

  workspaceId String
  workspace Workspace @relation("WorkspaceLogs",fields: [workspaceId], references: [id])

  userId    String
  user      User     @relation("UserLogs",fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String?
  organization Organization? @relation("OrganizationLogs", fields: [organizationId], references: [id])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        String
  time        String
  endTime     String
  occurence   String   @default("single") // single, recurring-weekly, recurring-monthly
  type        String   @default("event") // event, meeting, task
  location    String?
  status      String   @default("active") // active, cancelled

  createdById String @default("")
  createdBy   WorkspaceMember   @relation("CreatedEvents",fields: [createdById], references: [id])

  projectId   String?
  project     Project?   @relation("ProjectCalendarEvents", fields: [projectId], references: [id])

  workspaceId String
  workspace   Workspace @relation("WorkspaceCalendarEvents", fields: [workspaceId], references: [id])

  participants CalendarEventParticipant[] // ← Intermediate table

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CalendarEventParticipant {
  id               String          @id @default(cuid())
  calendarEventId  String
  workspaceMemberId String

  calendarEvent    CalendarEvent   @relation(fields: [calendarEventId], references: [id])
  workspaceMember  WorkspaceMember @relation(fields: [workspaceMemberId], references: [id])

  @@unique([calendarEventId, workspaceMemberId])
}
