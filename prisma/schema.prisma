// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Organization {
  id        String   @id @default(uuid())
  name      String
  type      String @default("personal")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String   @unique
  owner   User     @relation("OrganizationOwner", fields: [ownerId], references: [id])

  roles OrganizationRole[] @relation("OrganizationRoles")

  orgWorkspacePermissions WorkspacePermission[] @relation("OrgWorkspacePermissions")
  orgPermissions OrgPermission[] @relation("OrganizationPermissions")

  users     User[]            @relation("OrganizationUsers")
  workspaces Workspace[]      @relation("OrganizationWorkspaces")
  members    WorkspaceMember[] @relation("OrganizationWorkspaceMembers")
  logs       Log[]             @relation("OrganizationLogs")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contactNo String   @db.VarChar(20) @default("")
  location  String?  @db.VarChar(255) @default("")
  jobTitle    String   @default("")
  designation String   @default("")

  organizationRole  OrganizationRole?   @relation(fields: [organizationRoleId], references: [id])
  organizationRoleId String?

  // Workspace relations
  ownedWorkspaces Workspace[] @relation("OwnedWorkspaces")
  memberships     WorkspaceMember[]

  // Task relations
  Project        Project[]
  Task           Task[]
  logs           Log[] @relation("UserLogs")

  isVerified Boolean   @default(false)
  lastLogin  DateTime?

  // ✅ User may or may not own an organization (optional 1:1)
  ownedOrganization Organization? @relation("OrganizationOwner")

  // Organization membership (optional)
  organizationId String?
  organization   Organization? @relation("OrganizationUsers", fields: [organizationId], references: [id])
}

model Workspace {
  id          String   @id @default(cuid())
  icon        String?
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId  String?
  owner    User?              @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  
  members  WorkspaceMember[]

  projects Project[]
  
  departments Department[]
  
  logs Log[] @relation("WorkspaceLogs")

  calendarEvents CalendarEvent[] @relation("WorkspaceCalendarEvents")
  calendarEventSeries CalendarEventSeries[] @relation("WorkspaceCalendarEventSeries")
  
  relationships MemberWorkspaceRelationship[]

  roles WorkspaceRole[]   @relation("WorkspaceRoles")

  organizationId String?
  organization Organization? @relation("OrganizationWorkspaces", fields: [organizationId], references: [id]) 
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  invitedAt   DateTime @default(now())
  accepted    Boolean  @default(false)

  roleId       String?
  role         WorkspaceRole?   @relation(fields: [roleId], references: [id])

  userId      String
  workspaceId String
  departmentId String?

  user        User        @relation(fields: [userId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  department  Department?  @relation("MemberDepartment", fields: [departmentId], references: [id])

  projects     ProjectMember[]
  calendarEvents CalendarEventParticipant[] // ← Intermediate table

  createdEvents CalendarEvent[] @relation("CreatedEvents")

  relationships MemberWorkspaceRelationship[]

  organizationId String?
  organization Organization? @relation("OrganizationWorkspaceMembers", fields: [organizationId], references: [id])
}

model MemberWorkspaceRelationship {
  id               String          @id @default(cuid())
  workspaceMemberId String
  workspaceId String

  workspaceMember  WorkspaceMember @relation(fields: [workspaceMemberId], references: [id])
  workspace        Workspace       @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceMemberId, workspaceId])
}

model ProjectMember {
  id              String           @id @default(cuid())
  projectId       String
  memberId        String

  project         Project          @relation(fields: [projectId], references: [id])
  member          WorkspaceMember @relation(fields: [memberId], references: [id])

  assignedAt      DateTime         @default(now())

  assignedTasks Task[] @relation("AssignedTasks")

  @@unique([projectId, memberId]) // Optional: Prevent duplicate entries
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active") // "active", "archived", "completed", etc.
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign keys
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // One-to-many relation
  tasks Task[] @relation("TaskProject")
  taskStages TaskStage[] @relation("ProjectTaskStages")

  calendarEvents CalendarEvent[] @relation("ProjectCalendarEvents")

  members     ProjectMember[]
}

model TaskStage {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project  @relation("ProjectTaskStages",fields: [projectId], references: [id])
  tasks Task[] @relation("TaskStages")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo") // "todo", "in-progress", "done", etc.
  priority    String    @default("medium") // "low", "medium", "high", "critical"
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projectId String
  project   Project  @relation("TaskProject",fields: [projectId], references: [id])

  stageId String
  stage TaskStage @relation("TaskStages",fields: [stageId], references: [id])

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  assignees ProjectMember[] @relation("AssignedTasks")
}

model Department {
  id          String           @id @default(cuid())
  workspaceId String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     WorkspaceMember[] @relation("MemberDepartment")

  @@unique([name, workspaceId]) // ✅ compound unique constraint
}


model Log {
  id        String   @id @default(cuid())
  type      String   @default("workspace")   // workspace, project, task
  action    String   @default("create")
  message   String

  workspaceId String
  workspace Workspace @relation("WorkspaceLogs",fields: [workspaceId], references: [id])

  userId    String
  user      User     @relation("UserLogs",fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String?
  organization Organization? @relation("OrganizationLogs", fields: [organizationId], references: [id])
}

model CalendarEventSeries {
  id          String   @id @default(cuid())

  workspaceId String
  workspace   Workspace @relation("WorkspaceCalendarEventSeries", fields: [workspaceId], references: [id])

  seriesStartDate String
  seriesEndDate String

  repeatEvery Int
  repeatFor String 

  seriesTitle String? @default("")
  seriesDescription String? @default("")

  calendarEvents CalendarEvent[] @relation("CalendarEventSeries")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        String
  time        String
  endTime     String
  occurrence   String   @default("single") // single, recurring-weekly, recurring-monthly
  type        String   @default("event") // event, meeting, task
  location    String?
  status      String   @default("active") // active, cancelled

  createdById String @default("")
  createdBy   WorkspaceMember   @relation("CreatedEvents",fields: [createdById], references: [id])

  projectId   String?
  project     Project?   @relation("ProjectCalendarEvents", fields: [projectId], references: [id])

  workspaceId String
  workspace   Workspace @relation("WorkspaceCalendarEvents", fields: [workspaceId], references: [id])

  seriesId String?
  series CalendarEventSeries? @relation("CalendarEventSeries", fields: [seriesId], references: [id])

  participants CalendarEventParticipant[] // ← Intermediate table

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CalendarEventParticipant {
  id               String          @id @default(cuid())
  calendarEventId  String
  workspaceMemberId String

  calendarEvent    CalendarEvent   @relation(fields: [calendarEventId], references: [id])
  workspaceMember  WorkspaceMember @relation(fields: [workspaceMemberId], references: [id])

  @@unique([calendarEventId, workspaceMemberId])
}

// Roles and Permissions

enum PermissionType {
  PROJECT_VIEW
  PROJECT_CREATE
  PROJECT_EDIT
  PROJECT_DELETE

  TASK_VIEW
  TASK_CREATE
  TASK_EDIT
  TASK_DELETE

  MEMBER_ADD
  MEMBER_REMOVE
  MEMBER_CHANGE_ROLE

  EVENT_VIEW
  EVENT_CREATE
  EVENT_EDIT
  EVENT_EDIT_ANY
  EVENT_CANCEL
  EVENT_DELETE

  ROLE_WORKSPACE_CREATE
  ROLE_WORKSPACE_EDIT
  ROLE_WORKSPACE_DELETE

  DEPARTMENT_VIEW
  DEPARTMENT_CREATE
  DEPARTMENT_EDIT
  DEPARTMENT_DELETE
}

enum OrgPermissionType {
  OWNER

  ORG_VIEW
  ORG_EDIT
  ORG_DELETE

  ORG_ONBOARD_USER
  ORG_REMOVE_USER
  ORG_CHANGE_USER_ROLE

  ORG_WORKSPACE_VIEW
  ORG_WORKSPACE_CREATE
  ORG_WORKSPACE_EDIT
  ORG_WORKSPACE_DELETE

  ORG_CUSTOM_ROLE_CREATE
  ORG_CUSTOM_ROLE_EDIT
  ORG_CUSTOM_ROLE_DELETE
}

model WorkspaceRole {
  id          String        @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean       @default(false)

  workspaceId String
  workspace   Workspace     @relation("WorkspaceRoles",fields: [workspaceId], references: [id])


  permissions WorkspaceRolePermission[]
  members     WorkspaceMember[]
}

model WorkspacePermission {
  id   String           @id @default(cuid())    // e.g., "VIEW_PROJECT"
  name String
  organizationId String?
  organization Organization? @relation("OrgWorkspacePermissions",fields: [organizationId], references: [id])
  roles WorkspaceRolePermission[]
}

model WorkspaceRolePermission {
  id               String          @id @default(cuid())
  workspaceRoleId String
  workspacePermissionId  String

  role  WorkspaceRole @relation(fields: [workspaceRoleId], references: [id])
  permission    WorkspacePermission   @relation(fields: [workspacePermissionId], references: [id])

  @@unique([workspaceRoleId,workspacePermissionId])
}

model OrganizationRole {
  id             String            @id @default(cuid())
  name           String
  description    String?
  isDefault      Boolean           @default(false)

  organizationId String
  organization   Organization      @relation("OrganizationRoles",fields: [organizationId], references: [id])

  permissions OrgRolePermission[]
  members         User[]
}

model OrgPermission {
  id   String              @id @default(cuid())
  name String
  organizationId String?
  organization Organization? @relation("OrganizationPermissions",fields: [organizationId], references: [id])

  roles OrgRolePermission[]
}

model OrgRolePermission {
  id               String          @id @default(cuid())
  organizationRoleId String
  orgPermissionId  String

  role  OrganizationRole @relation(fields: [organizationRoleId], references: [id])
  permission    OrgPermission   @relation(fields: [orgPermissionId], references: [id])

  @@unique([orgPermissionId,organizationRoleId])
}
