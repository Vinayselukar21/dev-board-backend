// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("Admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Workspace relations
  ownedWorkspaces Workspace[]       @relation("OwnedWorkspaces")
  memberships     WorkspaceMember[]

  isVerified Boolean   @default(false)
  lastLogin  DateTime?

  // Task relations
  assignedTasks Task[] @relation("AssignedTasks")
  Project    Project[]
  Task       Task[]
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId  String
  owner    User              @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  members  WorkspaceMember[]
  projects Project[]
  departments Department[]
}

model WorkspaceMember {
  id        String   @id @default(cuid())
  role      String   @default("member") // e.g., admin, viewer, etc.
  invitedAt DateTime @default(now())
  accepted  Boolean  @default(false)

  // Relations
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  departmentId String
  department  Department @relation("MemberDepartment",fields: [departmentId], references: [id])
  projects     ProjectMember[]
  // add workspace member designation
}

model ProjectMember {
  id              String           @id @default(cuid())
  projectId       String
  memberId        String

  project         Project          @relation(fields: [projectId], references: [id])
  member          WorkspaceMember @relation(fields: [memberId], references: [id])

  assignedAt      DateTime         @default(now())

  @@unique([projectId, memberId]) // Optional: Prevent duplicate entries
}


model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active") // "active", "archived", "completed", etc.
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign keys
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // One-to-many relation
  tasks Task[] @relation("TaskProject")
  taskStages TaskStage[] @relation("ProjectTaskStages")

  members     ProjectMember[]
}

model TaskStage {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project  @relation("ProjectTaskStages",fields: [projectId], references: [id])
  tasks Task[] @relation("TaskStages")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo") // "todo", "in-progress", "done", etc.
  priority    String    @default("medium") // "low", "medium", "high", "critical"
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projectId String
  project   Project  @relation("TaskProject",fields: [projectId], references: [id])

  stageId String
  stage TaskStage @relation("TaskStages",fields: [stageId], references: [id])

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  assignees User[] @relation("AssignedTasks")
}

model Department {
  id        String   @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   WorkspaceMember[] @relation("MemberDepartment")
}
